install.packages("car")
clear
getwd()
setwd("C:/Users/paudi/Practiques_R")
getwd()
seq(1,3)
rep(1,5)
rep(seq(1,3))
rep(seq(1,3), 3)
ln(5) + 3^5 - sqrt(3pi) * sin(2pi/3) - sqrt(e)
ln(5) + 3*3*3*3*3 - sqrt(3pi) * sin(2pi/3) - sqrt(e)
log(5) + 3*3*3*3*3 - sqrt(3pi) * sin(2pi/3) - sqrt(e)
pi
log(5) + 3*3*3*3*3 - sqrt(3*pi) * sin(2*pi/3) - sqrt(e)
e
log(5) + 3*3*3*3*3 - sqrt(3*pi) * sin(2*pi/3) - sqrt(exp(1))
library(car)
library(car)
install.packages("Rcmdr")
pnorm(1,25)
pnorm(1.25)
pnorm(-1.25)
1 - pnorm(1.25)
pnorm(-1,25)
pnorm(-1.25)
pnorm(0.5, mean = 0.75, sd = 0.2)
qnorm(10, mean = 0.75, sd = 0.2)
qnorm(0.1, mean = 0.75, sd = 0.2)
qnorm(0.9, mean = 0.75, sd = 0.2)
1- pnorm(-3,090232)
1- pnorm(3,090232)
pnorm(-3,090232)
pnorm(3,090232)
pnorm(0,001)
qnorm(0.001)
qnorm(10)
qnorm(0.76)
1 - pnorm(1.25)
qnomr(0.9)
qnorm(0.9)
1- pnorm(0.5)
qnorm(0.9)
pnorm(14.29092337)
pnorm(14)
pnorm(13)
pnorm(0.99939)
pnorm(0.99999)
pnorm(1)
pnorm(2)
pnorm(1.5)
pnorm(1.1)
pnorm(1.2)
pnorm(1.3)
pnorm(1.28)
pnorm(0,3213)
1-pnorm(0.3213)
pnorm(0.3213)
clear
qt(0.975, df=3)
qt(0.025, df=3)
pt(3.16, df=348)
2*(1-pt(3.16, df=348))
set.seed(1669321)
dades1<- rpois(100,3)
mitjana<-round(runif(1, 48, 50))
dades2<- rnorm(30, mean=mitjana, sd=2)
aux = dades1<3
aux = c(dades1<3)
aux = dades1[<3]
aux = dades1[3]
aux = dades1[2]
aux
aux = dades1[0:100 if <3]
dades1<3
sum(dades1<3)
sum(dades1>=3)
i = c(1,2,3)
i = c(1,2)
ppois(i,3,100)
ppois(i, 3)
sum(ppois(i, 3))
1 - sum(ppois(i, 3))
i = c(0,1,2)
sum(ppois(i, 3))
1-sum(ppois(i, 3))
ppois(0,3)
ppois(1,3)
ppois(2,3)
sum(ppois(0,3), ppois(1,3), ppois(2,3))
dpois(2,3)
ppois(2,3)
dpois(i,3)
sum(dpois(i,3))
1 - sum(dpois(i,3))
qnorm(1.07658)
qnorm(1.07658, mean = 0.5768099)
qnorm(1.07658, mean = 0.5768099, sd=0.3)
qnorm(0.01)
qnorm(0.99)
qnorm(0.95)
qnorm(0.05)
clear
mean(dades2)
sqrt(var(dades2))
qt(0.95, 4)
qt(0.95, 5)
qt(0.95, 3)
qt(29,0.95)
qt(0.95, 29)
qt(0.05, 29)
dpois(5, 2.5)
dpois(3, 2.5)
dpois(2, 2.5)
dpois(4, 2.5)
dpois(5, 2.5)
dpois(2, 2.5)
dpois(3, 2.5)
dpois(4, 2.5)
dpois(5, 2.5)
dbinom(5, 5, 0.5)
dbinom(4, 5, 0.5)
dbinom(3, 5, 0.5)
dbinom(2, 5, 0.5)
dbinom(1, 5, 0.5)
1 - dbinom(0, 5, 0.5)
dbinom(5,5, 0.5)
dbinom(0,5, 0.5)
dpois(0, 2.5)
dbinom(5,5,0.5)
dbinom(0,5,0.5)
dbinom(5,5,0.5)
dbinom(0,5,0.5)
qnorm(0.9, mean=300, sd = sqrt(150))
x = sqrt(150)
qnorm(0.9, mean=300, sd = x
qnorm(0.9, mean=300, sd = x)
# Visualize the fitted variogram
plot(pollutant.fit_loocv_traffic)
# Fit a variogram for Universal Kriging
pollutant.fit_loocv_traffic <- automap::autofitVariogram(
formula = pollutant_obs ~ pollutant_model + buffer,
input_data = sf_model_obs_bcn,
verbose = TRUE,
miscFitOptions = list(merge.small.bins = FALSE)
)
# Visualize the fitted variogram
plot(pollutant.fit_loocv_traffic)
# Apply Universal Kriging
uk_gstat_traffic <- gstat(
formula = pollutant_obs ~ pollutant_model + buffer,
data = sf_model_obs_bcn,
model = pollutant.fit_loocv_traffic$var_model
)
# Ensure correct column names in combined_data
colnames(combined_data)[1] <- "pollutant_model"
colnames(combined_data)[4] <- "buffer"
# Predict using Universal Kriging
refined_corrected_model_traffic <- predict(object = uk_gstat_traffic, newdata = combined_data)
# Visualize the corrected model
mapview(refined_corrected_model_traffic, zcol = "var1.pred")
mapview(refined_corrected_model_traffic, zcol = "var1.var")
library(sf)
library(sp)
library(sf)
library(sp)
library(gstat)
library(automap)
library(mapview)
library(ggplot2)
# Setting
wdir <- "/esarchive/scratch/esarchive_ftp/AQS_database/Hands-on_Downscaling/Data/"
crs_latlon <- "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0" # projection data
crs_utm    <- "+proj=utm +zone=31 +ellps=intl +units=m +no_defs"       # universal transversal mercator zona 31 cat
# Load necessary datasets
sp_model <- readRDS(paste0(wdir, "sp_rawmodel_20220101.rds"))           # CALIOPE model data
pick_random_points <- sample(1:nrow(sp_model), min(1000, nrow(sp_model)))  # Ensure max sample is nrow(sp_model)
input_data_example <- sp_model[pick_random_points, ]  # Random sample of points
# Variogram fitting for pollutant
pollutant.fit_ok <- automap::autofitVariogram(formula = pollutant ~ 1, input_data = input_data_example, model = "Gau")
# Visualize the resulting variogram
plot(pollutant.fit_ok)
# Create gstat object for kriging
ok_gstat <- gstat(formula = pollutant ~ 1, data = sp_model, model = pollutant.fit_ok$var_model, nmax = 25)
# Interpolation using Ordinary Kriging at observation locations
OK <- predict(ok_gstat, newdata = sp_obs_locations)
# Convert Kriging result to sf for consistency
OK_sf <- st_as_sf(OK)
# Visualize the raw model values at the AQMS' locations
mapview(OK, zcol="var1.pred")  # corrected predicted value
mapview(OK, zcol="var1.var")   # variance of each value
# Ensure refined_grid and domain_polygon have the same CRS as the model
refined_grid <- st_transform(refined_grid, st_crs(sp_model))
domain_polygon <- st_transform(domain_polygon, st_crs(sp_model))
# Clip predictions to Barcelona domain
OK_bcn <- st_intersection(OK_sf, domain_polygon)
sp_modelBcn <- st_intersection(sp_model, domain_polygon)
# Apply Ordinary Kriging on the refined grid
OK_finergrid <- predict(ok_gstat, newdata = refined_grid)
# Visualize the interpolated model
mapview(OK_finergrid, zcol = "var1.pred")
# Ensure CRS consistency for traffic buffers
traffic_buffers <- st_transform(traffic_buffers, st_crs(sp_model))
# Variogram fitting for traffic buffers
traffic.fit_ok <- automap::autofitVariogram(formula = buffer_100m_class_normalized ~ 1, input_data = traffic_buffers)
# Visualize the resulting variogram (Corrected variable name)
plot(traffic.fit_ok)
# Create gstat object for traffic buffers
ok_gstat_traffic <- gstat(formula = buffer_100m_class_normalized ~ 1, data = traffic_buffers, model = traffic.fit_ok$var_model, nmax = 25)
# Interpolate traffic buffers using Kriging
OK_traffic_buffers <- predict(ok_gstat_traffic, newdata = OK_bcn)
# Visualize the traffic buffers
mapview(OK_traffic_buffers, zcol = "var1.pred")
# Merge OK_finergrid and traffic_buffers
combined_data <- st_intersection(OK_finergrid, traffic_buffers)
# Ensure all spatial datasets are using the same CRS
sf_obs_locations <- st_transform(sp_obs_locations, st_crs(domain_polygon))
sf_obs_locations_bcn <- st_intersection(sf_obs_locations, domain_polygon)
# Adjusting observed data for Barcelona domain
df_rawmodel_interpolated_bcn <- data.frame(
lat = st_coordinates(sf_obs_locations_bcn)[, 2],
lon = st_coordinates(sf_obs_locations_bcn)[, 1],
pollutant_model = OK_bcn$var1.pred,
ref_obs = sf_obs_locations_bcn$code,
buffer = OK_traffic_buffers$var1.pred
)
# Merge with observed data
df_obs_cols <- data.frame(pollutant_obs = as.numeric(df_obs), ref_obs = colnames(df_obs))
df_model_obs_bcn <- merge(df_rawmodel_interpolated_bcn, df_obs_cols, by = "ref_obs")
# Remove missing values
df_model_obs_bcn <- na.omit(df_model_obs_bcn)
# Convert to sf object
sf_model_obs_bcn <- st_as_sf(df_model_obs_bcn, coords = c("lon", "lat"), crs = st_crs(domain_polygon))
# Visualize the model in Barcelona domain
mapview(sf_model_obs_bcn, zcol = "pollutant_model")
# Fit a variogram for Universal Kriging
pollutant.fit_loocv_traffic <- automap::autofitVariogram(
formula = pollutant_obs ~ pollutant_model + buffer,
input_data = sf_model_obs_bcn,
verbose = TRUE,
miscFitOptions = list(merge.small.bins = FALSE)
)
# Visualize the fitted variogram
plot(pollutant.fit_loocv_traffic)
# Apply Universal Kriging
uk_gstat_traffic <- gstat(
formula = pollutant_obs ~ pollutant_model + buffer,
data = sf_model_obs_bcn,
model = pollutant.fit_loocv_traffic$var_model
)
# Ensure correct column names in combined_data
colnames(combined_data)[1] <- "pollutant_model"
colnames(combined_data)[4] <- "buffer"
# Predict using Universal Kriging
refined_corrected_model_traffic <- predict(object = uk_gstat_traffic, newdata = combined_data)
# Visualize the corrected model
mapview(refined_corrected_model_traffic, zcol = "var1.pred")
setwd("~/GitHub/Fem-Visible-Invisible/Backend/R/Data")
shape <- read_sf(dsn = "./Barcelona/roadlinks_ES511.shp")
library(sf)
shape <- read_sf(dsn = "./Barcelona/roadlinks_ES511.shp")
View(shape)
library(ncdf4)
library(pracma)
library(sf)
wdir <- "../Data/"
#PRUEBAS PROPIAS
#Info del tipus de part de la ciutat que hi ha en una (lat, lon) concreta
infoEstacions <- read.csv("XVPCA_info_sconcno2_2023.csv")
infoEstacions <- head(infoEstacions, length(infoEstacions$code))
taulaInfoEstacions <- table(infoEstacions)
View(taulaInfoEstacions)
mesuresEstacions <- read.csv("gene_sconcno2_2023_xvpca_emep_port.csv")
View(mesuresEstacions)
variables = mesuresEstacions[0, ]
estacions = list(c(41.39216, 2.009802),
c(41.11588, 1.191975),
c(41.44398, 2.237875),
c(41.32177, 2.082141)) #AquÃ­ aniran les dades de les estacions objectiu a mesurar mostrades al kaggle
dades = c("date", "lat", "lon", "concentration") #Columnes que ha de tenir el csv a entregar
resultats <- data.frame(id = integer(),
date=as.character(), #Creem DataFrame on mostrar els resultats
lat=double(),
lon=double(),
concentration=double())
View(resultats)
nearest <- list(c(), c(), c(), c())
for(i in 2:length(mesuresEstacions))
{
mitja = mean(as.double(mesuresEstacions[[i]]), na.rm=TRUE)
for(j in 1:length(mesuresEstacions$Date))
{
if(is.na(mesuresEstacions[[i]][j]))
{
mesuresEstacions[[i]][j] = mitja
}
}
}
for(i in 1:length(infoEstacions$code))
{
for(j in 1:length(estacions))
{
dist = haversine(c(estacions[[j]][1], estacions[[j]][2]), c(infoEstacions[i,][["lat"]], infoEstacions[i,][["lon"]]))
nearest[[j]][length(nearest[[j]])+1] = infoEstacions[i,][["code"]]
nearest[[j]][length(nearest[[j]])+1] = dist
}
}
nearestCodes <- list(c(), c(), c(), c())
for(i in 1:length(nearest))
{
mitja = mean(as.double(nearest[[i]][seq(2,length(nearest[[i]]), by=2)]))
for(j in seq(2, length(nearest[[1]]), by=2))
{
if(nearest[[i]][j] <= mitja)
{
nearestCodes[[i]][length(nearestCodes[[i]])+1] <- nearest[[i]][j-1]
}
}
}
cl = colnames(mesuresEstacions)[0:-1] #Obtenim  el nom totes les estacions per poder obtenir les mesures
for(i in 1:nrow(mesuresEstacions))
{
for(z in 1:length(estacions))
{
sum = 0.0
for(j in cl){
if(is.element(j, nearestCodes[[z]]))
{
total = mean( mesuresEstacions[[j]][i] + mesuresEstacions[[j]][i - 1] + mesuresEstacions[[j]][i + 1])
sum = sum + total
}
}
conc = sum/length(cl)
if(is.na(conc))
{
conc = 16.2
}
index = (i-1) * 4 + z
resultats[index,] <- list(index, mesuresEstacions$Date[i],
estacions[[z]][1],
estacions[[z]][2],
conc)
}
}
# X = resultats$date
# X = as.factor(X)
# Y = resultats$concentration
# dev.new(width=1920, height=1080, unit="px")#Fem un resize de la window per mostrar la grÃ fica
# grafic = plot(X, Y, ylab= "Concentration", ylim= c(0,120), las=2)
write.csv(resultats, "./resultats.csv", quote = FALSE, row.names = FALSE)
shape <- read_sf(dsn = "./Barcelona/roadlinks_ES511.shp")
View(shape)
shape["geometry"]
shape["geometry"][1]
shape[["geometry"]]
shape[["geometry"]][1]
shape[["geometry"]][1][1]
shape[["geometry"]][[1]]
shape[["geometry"]][[2]]
shape[["geometry"]][[1]]
shape[["geometry"]][[1]]["lat"]
shape[["geometry"]][[1]]
shape["lat"]
shape["geometry"]["lat"]
shape["geometry"]
shape[["geometry"]][[1]]
k = shape[["geometry"]][[1]]
k["X"]
k["XY"]
k[0]
k[1]
k[2]
k[3]
k[4]
k[5]
k[[1]]
k[[2]]
k[[3]]
k[1][1]
k[1][2]
k[2]
k
X = resultats$date
X = as.factor(X)
Y = resultats$concentration
dev.new(width=1920, height=1080, unit="px")#Fem un resize de la window per mostrar la grÃ fica
grafic = plot(X, Y, ylab= "Concentration", ylim= c(0,120), las=2)
grafic = plot(X, Y,xlab="", ylab= "Concentration", ylim= c(0,120), las=2)
dev.new(width=1920, height=1080, unit="px")#Fem un resize de la window per mostrar la grÃ fica
grafic = plot(X, Y,xlab="", ylab= "Concentration", ylim= c(0,120), las=2)
windows() ; msgWindow(type="maximize")#Fem un resize de la window per mostrar la grÃ fica
grafic = plot(X, Y,xlab="", ylab= "Concentration", ylim= c(0,120), las=2)
X = resultats$date
#X = as.factor(X)
Y = resultats$concentration
windows() ; msgWindow(type="maximize")#Fem un resize de la window per mostrar la grÃ fica
grafic = plot(X, Y,xlab="", ylab= "Concentration", ylim= c(0,120), las=2)
X = resultats$date
X = as.numeric(X)
Y = resultats$concentration
windows() ; msgWindow(type="maximize")#Fem un resize de la window per mostrar la grÃ fica
grafic = plot(X, Y,xlab="", ylab= "Concentration", ylim= c(0,120), las=2)
X = as.character.factor(X)
X = resultats$date
X = as.character.factor(X)
X = resultats$date
X = as.factor(X)
Y = resultats$concentration
windows() ; msgWindow(type="maximize")#Fem un resize de la window per mostrar la grÃ fica
grafic = plot(X, Y,xlab="", ylab= "Concentration", ylim= c(0,120), las=2, type = "b")
windows() ; msgWindow(type="maximize")#Fem un resize de la window per mostrar la grÃ fica
grafic = plot(X, Y,xlab="", ylab= "Concentration", ylim= c(0,120),xlim= c(0, 300), las=2, type = "b")
windows() ; msgWindow(type="maximize")#Fem un resize de la window per mostrar la grÃ fica
grafic = plot(X, Y,xlab="", ylab= "Concentration", ylim= c(0,120),xlim= c(0, 500), las=2, type = "b")
windows() ; msgWindow(type="maximize")#Fem un resize de la window per mostrar la grÃ fica
grafic = plot(X, Y,xlab="", ylab= "Concentration", ylim= c(0,120),xlim= c(0, 8760), las=2, type = "b")
windows() ; msgWindow(type="maximize")#Fem un resize de la window per mostrar la grÃ fica
grafic = plot(X, Y,xlab="", ylab= "Concentration", ylim= c(0,120),xlim= c(0, 600), las=2, type = "b")
windows() ; msgWindow(type="maximize")#Fem un resize de la window per mostrar la grÃ fica
grafic = plot(X, Y,xlab="", ylab= "Concentration", ylim= c(0,120),xlim= c(0, 600), las=2, type = "b")
windows() ; msgWindow(type="maximize")#Fem un resize de la window per mostrar la grÃ fica
grafic = plot(X, Y,xlab="", ylab= "Concentration", ylim= c(0,120),xlim= c(0, 600), las=2, type = "b", cex.axis = 0.5)
windows() ; msgWindow(type="maximize")#Fem un resize de la window per mostrar la grÃ fica
grafic = plot(X, Y,xlab="", ylab= "Concentration", ylim
= c(0,120),xlim= c(0, 600), las=2, type = "b", cex.axis = 0.75)
windows() ; msgWindow(type="maximize")#Fem un resize de la window per mostrar la grÃ fica
grafic = plot(X, Y,xlab="", ylab= "Concentration", ylim= c(0,120),xlim= c(0, 600), las=1, type = "b", cex.axis = 1)
windows() ; msgWindow(type="maximize")#Fem un resize de la window per mostrar la grÃ fica
grafic = plot(X, Y,xlab="", ylab= "Concentration", ylim= c(0,120),xlim= c(0, 600), las=1, type = "b", axes=FALSE)
windows() ; msgWindow(type="maximize")#Fem un resize de la window per mostrar la grÃ fica
grafic = plot(X, Y,xlab="", ylab= "Concentration", ylim= c(0,120), las=1, type = "b", cex= 0.75)
windows() ; msgWindow(type="maximize")#Fem un resize de la window per mostrar la grÃ fica
grafic = plot(X, Y,xlab="", ylab= "Concentration", ylim= c(0,120), las=2, type = "b", cex= 0.75)
windows() ; msgWindow(type="maximize")#Fem un resize de la window per mostrar la grÃ fica
grafic = plot(X, Y,xlab="", ylab= "Concentration", las=2, type = "b", cex= 0.75)
Y = resultats$concentration
windows() ; msgWindow(type="maximize")#Fem un resize de la window per mostrar la grÃ fica
grafic = plot(X, Y,xlab="", ylab= "Concentration", las=2, type = "b")
windows() ; msgWindow(type="maximize")#Fem un resize de la window per mostrar la grÃ fica
grafic = plot(X, Y,xlab="", ylab= "Concentration", las=2)
